// <auto-generated />
using System;
using FlotteVoiture;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlotteVoiture.Migrations
{
    [DbContext(typeof(FlotteContext))]
    [Migration("20240921113946_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("FlotteVoiture.Chauffeur", b =>
                {
                    b.Property<int>("ChauffeurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Anciennete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Permis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ChauffeurId");

                    b.ToTable("Chauffeurs");
                });

            modelBuilder.Entity("FlotteVoiture.Maintenance", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Cout")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateMaintenance")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeMaintenance")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VehiculeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MaintenanceId");

                    b.HasIndex("VehiculeId");

                    b.ToTable("Maintenances");
                });

            modelBuilder.Entity("FlotteVoiture.Trajet", b =>
                {
                    b.Property<int>("TrajetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChauffeurId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Distance")
                        .HasColumnType("REAL");

                    b.Property<TimeSpan>("Duree")
                        .HasColumnType("TEXT");

                    b.Property<string>("LieuArrivee")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LieuDepart")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VehiculeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TrajetId");

                    b.HasIndex("ChauffeurId");

                    b.HasIndex("VehiculeId");

                    b.ToTable("Trajets");
                });

            modelBuilder.Entity("FlotteVoiture.Vehicule", b =>
                {
                    b.Property<int>("VehiculeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChauffeurId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disponible")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnPanne")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Immatriculation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Kilometrage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KilometragePourMaintenance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Marque")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Modele")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("VehiculeId");

                    b.HasIndex("ChauffeurId");

                    b.ToTable("Vehicules");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Vehicule");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FlotteVoiture.Camion", b =>
                {
                    b.HasBaseType("FlotteVoiture.Vehicule");

                    b.HasDiscriminator().HasValue("Camion");
                });

            modelBuilder.Entity("FlotteVoiture.Moto", b =>
                {
                    b.HasBaseType("FlotteVoiture.Vehicule");

                    b.HasDiscriminator().HasValue("Moto");
                });

            modelBuilder.Entity("FlotteVoiture.Voiture", b =>
                {
                    b.HasBaseType("FlotteVoiture.Vehicule");

                    b.HasDiscriminator().HasValue("Voiture");
                });

            modelBuilder.Entity("FlotteVoiture.Maintenance", b =>
                {
                    b.HasOne("FlotteVoiture.Vehicule", "VehiculeConcerne")
                        .WithMany()
                        .HasForeignKey("VehiculeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehiculeConcerne");
                });

            modelBuilder.Entity("FlotteVoiture.Trajet", b =>
                {
                    b.HasOne("FlotteVoiture.Chauffeur", "Chauffeur")
                        .WithMany("Trajets")
                        .HasForeignKey("ChauffeurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlotteVoiture.Vehicule", "Vehicule")
                        .WithMany("Trajets")
                        .HasForeignKey("VehiculeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chauffeur");

                    b.Navigation("Vehicule");
                });

            modelBuilder.Entity("FlotteVoiture.Vehicule", b =>
                {
                    b.HasOne("FlotteVoiture.Chauffeur", null)
                        .WithMany("VehiculesAffectes")
                        .HasForeignKey("ChauffeurId");
                });

            modelBuilder.Entity("FlotteVoiture.Chauffeur", b =>
                {
                    b.Navigation("Trajets");

                    b.Navigation("VehiculesAffectes");
                });

            modelBuilder.Entity("FlotteVoiture.Vehicule", b =>
                {
                    b.Navigation("Trajets");
                });
#pragma warning restore 612, 618
        }
    }
}
